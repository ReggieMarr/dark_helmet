* [2020-08-12 Wed 14:00] grasp/org_tools.py at af24c991579986cec73695daa8318e7831049305 · karlicoss/grasp :grasp:
https://github.com/karlicoss/grasp/blob/af24c991579986cec73695daa8318e7831049305/server/org_tools.py#L91-L109
Comment:
This capture
* [2020-08-12 Wed 14:51] kzar/davemail: My email configuration, using mbsync, notmuch, msmtp, msmtpq, pgp, emacs and gnus-alias :grasp:email:notmuch:emacs:
https://github.com/kzar/davemail
Comment:
example on setting up notmuch email
* [2020-08-12 Wed 14:52] Notmuch in Emacs with mbsync and msmtp · she will never swims alone :grasp:email:emacs:
https://www.ying-ish.com/essay/emacs-notmuch-mbsync-msmtp-email/
Comment:
setup emacs with email with notmuch and msmtp
* [2020-08-12 Wed 15:11] Extracting PDF highlights and linking back to PDF in org-mode : emacs :grasp:pdf:org-mode:org-capture:emacs:
https://www.reddit.com/r/emacs/comments/7yxg1t/extracting_pdf_highlights_and_linking_back_to_pdf/
Comment:
ways to capture pdfs in org notes
* [2020-08-12 Wed 23:11] Configuring Doom emacs, mbsync, and mu4e for use with o365 • Unl0ckd :grasp:email:mbsync:mu4e:
https://www.chrislockard.net/posts/2019-11-14-notes-on-configuring-mu4e-and-doom-emacs/
Comment:
doom emacs unlocked email setup
* [2020-08-12 Wed 23:13] tuhdo/semantic-refactor: Semantic Refactor is a refactoring tool based on Semantic parser framework :grasp:emacs:function:prototype:
https://github.com/tuhdo/semantic-refactor
Comment:
semantic refact
* [2020-08-12 Wed 23:27] What is Open Collector Output? :grasp:basic:electronics:
http://www.learningaboutelectronics.com/Articles/Open-collector-output.php
Selection:
An open collector output refers to an output that is connected to the collector of a transistor.

Basically, just think of a transistor. A BJT transistor has a base, a collector, and an emitter.

An open collector output is an output device that is attached to an open collector of a transistor.

By open collector, we mean a collector that is unattached to anything. It's just open.

In order for an open collector output device to work, the open collector has to receive sufficient power.

In order to understand this, you have to understand NPN transistors. In order for an NPN transistor to work, the base and the collector both need sufficient power. The base turns the transistor on. And then a much greater current flows from collector to emitter, but only if the collector has sufficient positive voltage.

A perfect example of an open collector output are voltage comparators. Pretty much all voltage comparator chips, such as the LM311, the LM393, and the LM339 all function as output collector outputs.

Below is shown the internal diagram or makeup of the LM311 voltage comparator chip. 
Comment:
open collector defitions
* [2020-08-13 Thu 10:57] Zettelkasten/Org-roam/Org-brain Is Crap : emacs :grasp:zettlekasten:emacs:org-roam:
https://www.reddit.com/r/emacs/comments/hg2m5s/zettelkastenorgroamorgbrain_is_crap/
Comment:
this is interesting since it appears to give lots of tips on the shortcomings of the zettelkasten method/org-roam system. The people who comment show where to maxmize its effectiveness.
* [2020-08-13 Thu 11:29] Using Emacs 44 - An Org mode and PDF-tools workflow - YouTube :grasp:emacs:pdf-tools:org-mode:
https://www.youtube.com/watch?v=LFO2UbzbZhA
Comment:
skip the first 8 or so minutes on this but then its interesting.
Firstly the macro he uses to turn the pdfs into org note references is interesting. Secondly it really displays the power of mixing dired, org-mode, and pdf tools
* [2020-08-13 Thu 13:40] Org-capture in Files · The Art of Not Asking Why :grasp:emacs:org-mode:org-capture:
https://joshrollinswrites.com/help-desk-head-desk/org-capture-in-files/
Comment:
capturing files templates
* [2020-08-14 Fri 11:34] The Magical container_of() Macro (by @radekpazdera) :grasp:programming:container:of:C:
https://radek.io/2012/11/10/magical-container_of-macro/
Comment:
link that sean sent wrt the container of macro
* [2020-08-14 Fri 11:34] braindump(ag) == Magic in the container_of() linux kernel macro :grasp:programming:container:of:
https://andrei.gherzan.ro/linux/the-magic-in-container-of/
Comment:
container of in the context of the linux kernel
recent post (2019-11-22)
* [2020-08-14 Fri 17:51] emacs - Inline PDF images in org-mode - Stack Overflow :emacs:org-mode:pdf:
https://stackoverflow.com/questions/15407485/inline-pdf-images-in-org-mode
Selection:
Let me finish this question.

Firstly, Org-mode does not support any pdf inline display function with itself. However, it is possible to modify org-display-inline-images to achieve what you want. First you need to refer to this answer: Configuring emacs for showing fixed width inline images, which inspired me a lot. Then I slightly modified the function, making it support pdf, bmp display in org-mode. My function is on below.

#+BEGIN_SRC emacs-lisp
(setq image-file-name-extensions
   (quote
    ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))

(setq org-image-actual-width 600)

(setq org-imagemagick-display-command "convert -density 600 \"%s\" -thumbnail \"%sx%s>\" \"%s\"")
(defun org-display-inline-images (&optional include-linked refresh beg end)
  "Display inline images.
Normally only links without a description part are inlined, because this
is how it will work for export.  When INCLUDE-LINKED is set, also links
with a description part will be inlined.  This
can be nice for a quick
look at those images, but it does not reflect what exported files will look
like.
When REFRESH is set, refresh existing images between BEG and END.
This will create new image displays only if necessary.
BEG and END default to the buffer boundaries."
  (interactive "P")
  (unless refresh
    (org-remove-inline-images)
    (if (fboundp 'clear-image-cache) (clear-image-cache)))
  (save-excursion
    (save-restriction
      (widen)
      (setq beg (or beg (point-min)) end (or end (point-max)))
      (goto-char beg)
      (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                        (substring (org-image-file-name-regexp) 0 -2)
                        "\\)\\]" (if include-linked "" "\\]")))
            old file ov img)
        (while (re-search-forward re end t)
          (setq old (get-char-property-and-overlay (match-beginning 1)
                                                   'org-image-overlay)
        file (expand-file-name
                      (concat (or (match-string 3) "") (match-string 4))))
          (when (file-exists-p file)
            (let ((file-thumb (format "%s%s_thumb.png" (file-name-directory file) (file-name-base file))))
              (if (file-exists-p file-thumb)
                  (let ((thumb-time (nth 5 (file-attributes file-thumb 'string)))
                        (file-time (nth 5 (file-attributes file 'string))))
                    (if (time-less-p thumb-time file-time)
            (shell-command (format org-imagemagick-display-command
                           file org-image-actual-width org-image-actual-width file-thumb) nil nil)))
                (shell-command (format org-imagemagick-display-command
                                         file org-image-actual-width org-image-actual-width file-thumb) nil nil))
              (if (and (car-safe old) refresh)
                  (image-refresh (overlay-get (cdr old) 'display))
                (setq img (save-match-data (create-image file-thumb)))
                (when img
                  (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                  (overlay-put ov 'display img)
                  (overlay-put ov 'face 'default)
                  (overlay-put ov 'org-image-overlay t)
                  (overlay-put ov 'modification-hooks
                               (list 'org-display-inline-remove-overlay))
                  (push ov org-inline-image-overlays))))))))))

#+END_SRC
The function uses convert file.pdf -thumbnail "400x400>" file_thumb.png to generate a file_thumb named thumbnail in your folder to substitute overlay of pdf, and force org-mode to display pdf with file_thumb without any modification to the org file.

Moreover, because i use babel to generate image with python. It always need me to update the _thumb file, so I add a if condition to say if this thumb file existed or not, and if the pdf file changed i need to change thumb file on the same time... and so on!

Hope it can help you.
Comment:
This shows how to create a thumbnail from a pdf and use it inline in a org file
* [2020-08-16 Sun 23:12] fuxialexander/org-pdftools: A custom org link type for pdf-tools :grasp:emacs:org-mode:pdf:
https://github.com/fuxialexander/org-pdftools
Comment:
Crazy extension to pdf tools
* [2020-08-16 Sun 23:18] org-pdftools & org-noter demo - YouTube :grasp:org-mode:emacs:org-capture:pdf:
https://www.youtube.com/watch?v=lCc3UoQku-E
Comment:
showing off how to use pdftools and org noter around halfway he shows how to create links from the current page. this could be useful for creating captures.
* [2020-08-29 Sat 13:49] [WR-3472] Missing Reticule from FSD - Jira :grasp:
http://cesium/jira/browse/WR-3472
Comment:
This some note
* [2020-08-29 Sat 22:15] C Constant Pointers and Pointer to Constants Examples :C:programming:
https://www.thegeekstuff.com/2012/06/c-constant-pointers/
Comment:
good reference for const pointers and const data
* [2020-08-29 Sat 22:37] Struct Iteration through (Ab)use of the C Preprocessor :C:programming:macros:
https://natecraun.net/articles/struct-iteration-through-abuse-of-the-c-preprocessor.html
Comment:
this might contain the key to creating a macro that copies a struct and produces another struct that contains members that are pointers to each type of member in the source struct
* [2020-08-29 Sat 23:14] How to initialize a pointer to a struct in C? - Stack Overflow :C:programming:
https://stackoverflow.com/questions/11709929/how-to-initialize-a-pointer-to-a-struct-in-c
Comment:
notes on compound literals and how we can initialize pointers to structs which contain const pointer members
* [2020-08-30 Sun 10:18] Introducing Read on reMarkable. Read on reMarkable is now live and… | by reMarkable | Aug, 2020 | reMarkable Blog :remarkable:note:taking:
https://blog.remarkable.com/introducing-read-on-remarkable-6981369b6399
Selection:
With the new extension, you can send articles in a simplified text format (EPUB) with a single click. You can adjust text settings on the device to customize your reading experience, and it goes without saying you can annotate your chosen articles.
Comment:
this is pretty interesting, it'd be neat to know if they are compatible with firefox
* [2020-08-31 Mon 17:22] averest – Model-based Design of Parallel Embedded Reactive Systems :model:driven:engineering:embedded:systems:
http://www.averest.org/#about_thesynchronouslanguagequartz
Selection:
The Synchronous Language Quartz

Synchronous languages are well-suited for the design of reactive systems. Their common paradigm is the perfect synchrony, which means that most of the statements are executed as micro steps in zero time. Consumption of time is explicitly programmed by partitioning the micro steps using pause statements into macro steps that all take the same amount of logical time. Thus, concurrent threads run in lockstep and automatically synchronize at the end of a macro step. The introduction of micro and macro steps is not only a convenient programming model, it is also the key to generate deterministic single-threaded code from multi-threaded synchronous programs. Thus, synchronous programs can be executed on ordinary microcontrollers without complex operating systems. As another advantage, the translation of synchronous programs to circuits is straightforward. Moreover, the formal semantics of synchronous languages makes them particularly attractive for reasoning about program semantics and correctness.

Key features of Quartz are generic statements to describe parameterized systems, different forms of parallel execution (synchronous, asynchronous, interleaved), nondeterministic choice, event and state variables, integers of infinite and finite bitwidth as well as multi-dimensional array types.
Comment:
This might be worth exploring as a means for high level embedded systems programming
* [2020-09-01 Tue 10:16] Pensieve | Wizarding World :random:notes:org-roam:
https://www.wizardingworld.com/writing-by-jk-rowling/pensieve
Selection:
The name ‘Pensieve’ is a homonym of ‘pensive’, meaning deeply, seriously thoughtful; but it also a pun, the ‘sieve’ part of the word alluding to the object’s function of sorting meanings from a mass of thoughts or memories.
Comment:
interesting metaphore for an exo-brain
* [2020-09-01 Tue 10:21] nmartin84/.doom.d: This is my private DOOM emacs configuration. :emacs:doom:emacs:configuration:
https://github.com/nmartin84/.doom.d
Comment:
a really good literate doom config
* [2020-09-01 Tue 10:22] Diagrams With PlantUML and Emacs – Alvin Sim :emacs:plantuml:mde:
http://www.alvinsim.com/diagrams-with-plantuml-and-emacs/
Selection:
(org-babel-do-load-languages ‘org-babel-load-languages ‘((plantuml . t)))
Comment:
example of getting plantuml to work
* [2020-09-01 Tue 10:23] Getting Boxes Done :emacs:gtd:
http://www.howardism.org/Technical/Emacs/getting-boxes-done.html
Comment:
getting things done with emacs
* [2020-09-01 Tue 10:25] RicardoNiepel/C4-PlantUML: C4-PlantUML combines the benefits of PlantUML and the C4 model for providing a simple way of describing and communicate software architectures :C4:model:mde:plantuml:
https://github.com/RicardoNiepel/C4-PlantUML
Comment:
Since plantuml is essentially an abstraction from dot to graphviz it'd be awesome to create dot macros that map to these plantuml macros`
* [2020-09-01 Tue 10:26] The C4 model for visualising software architecture :model:driven:engineering:C4:model:
https://c4model.com/
Comment:
The home for C4 model info
* [2020-09-02 Wed 12:51] Capturing Content for Emacs :org-capture:org-mode:
http://www.howardism.org/Technical/Emacs/capturing-content.html
Comment:
super interesting ideas for org capture templates
* [2020-09-10 Thu 23:40] org-git-link.el – link to specific git revisions :org:mode:org:capture:
https://orgmode.org/worg/org-contrib/org-git-link.html
Comment:
This shows how to create an org mode link to a file at a certain git hash. This could be useful for creating org capture templates that allow you to link to a file at a paticular revision
* [2020-09-11 Fri 14:16] AUR (en) - emacs-native-comp-git :emacs:native:comp:
https://aur.archlinux.org/packages/emacs-native-comp-git
Selection:
The libgccjit package is now up-to-date, and includes a dependency on gcc-libs so that it won't silently break next time GCC is updated. I'm now maintaining that package and will do my best to handle updates ASAP.

I also recommend checking out emacs-pgtk-native-comp-git, this combines native compilation with a new rendering engine for an even faster Emacs.
Comment:
This slightly different emacs package is worth checking out espcially if its even faster 
* [2020-09-16 Wed 09:39] Rust-style futures in C | Axel Forsman :c:programming:rust:
https://axelforsman.tk/2020/08/24/rust-style-futures-in-c.html
Comment:
this could be a cool way of setting up pthreads
* [2020-09-16 Wed 15:54] C Programming For Beginners: Tip #2 Abstract Interfaces In C Done Right - YouTube :c:programming:
https://www.youtube.com/watch?v=K6sDQi-WFW0
Comment:
a brief video example with source code of the container_of macro
* [2020-09-17 Thu 21:56] Introduction to strong and weak symbols in C language :c:programming:weak:symbols:
https://ofstack.com/C++/9908/introduction-to-strong-and-weak-symbols-in-c-language.html
Comment:
Interesting article on how to use weak attributes
* [2020-09-21 Mon 19:50] gcc - Hiding symbol names in library - Stack Overflow :c:programming:
https://stackoverflow.com/questions/22244428/hiding-symbol-names-in-library
Comment:
This provides insight into how to hide symbols within libraries
* [2020-09-23 Wed 11:11] Tangle Templates :emacs:programming:
https://lepisma.xyz/2018/08/26/tangle-templates.html
Comment:
generate boilerplate for new projects
* [2020-09-24 Thu 10:58] GNU Make - An Introduction to Makefiles :c:programming:
http://web.mit.edu/gnu/doc/html/make_2.html
Comment:
A good refresher on making makefiles
* [2020-09-24 Thu 12:05] c - How to hide a global variable, which is visible across multiple files? - Stack Overflow :c:programming:
https://stackoverflow.com/questions/15434971/how-to-hide-a-global-variable-which-is-visible-across-multiple-files
Comment:
good example on using visibility attribute to hide global variables inside of a library
* [2020-09-25 Fri 18:21] Basics of the I2C Communication Protocol :i2c:hardware:
https://www.circuitbasics.com/basics-of-the-i2c-communication-protocol/
Comment:
Good refresher on how i2c works
* [2020-09-26 Sat 09:42] Save countless hours reviewing code — Metabob :software:architecture:programming:python:mda:
https://www.metabob.com/?utm_source=Reddit%20Post&utm_medium=Social%20Media&utm_campaign=Reddit%20Post%2009-24
Comment:
This might be interesting to investigate for static analysis of python code
